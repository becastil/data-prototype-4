version: '3.9'

services:
  postgres:
    image: postgres:16-alpine
    container_name: medreporting-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: medreporting
      POSTGRES_PASSWORD: medreporting_dev
      POSTGRES_DB: medreporting
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medreporting"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Development web service (optional - can run outside Docker)
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile.dev
    container_name: medreporting-web
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://medreporting:medreporting_dev@postgres:5432/medreporting?schema=public
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/web/node_modules
    command: npm run dev

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: medreporting-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: medreporting-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
